// src/main.ts
import { app, BrowserWindow, ipcMain } from 'electron';
import * as path from 'path';
import * as fs from 'fs';
import { contextBridge, ipcRenderer } from 'electron';


// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// Path to store notes
const userDataPath = app.getPath('userData');
const notesDir = path.join(userDataPath, 'notes');

// Ensure notes directory exists
if (!fs.existsSync(notesDir)) {
  fs.mkdirSync(notesDir, { recursive: true });
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,
      nodeIntegration: false,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  // Register IPC handlers
  registerIpcHandlers();
  
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// Register IPC handlers for note operations
function registerIpcHandlers() {
  // Get all notes
  ipcMain.handle('get-notes', async () => {
    try {
      if (!fs.existsSync(notesDir)) {
        fs.mkdirSync(notesDir, { recursive: true });
        return [];
      }
      
      const files = fs.readdirSync(notesDir).filter(file => file.endsWith('.json'));
      const notes = [];
      
      for (const file of files) {
        const content = fs.readFileSync(path.join(notesDir, file), 'utf-8');
        const note = JSON.parse(content);
        notes.push(note);
      }
      
      return notes;
    } catch (error) {
      console.error('Error getting notes:', error);
      return [];
    }
  });

  // Create a new note
  ipcMain.handle('create-note', async () => {
    try {
      const id = Date.now().toString();
      const newNote = {
        id,
        title: 'Untitled Note',
        content: '',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        tags: [],
        blocks: [{
          id: `block-${Date.now()}`,
          type: 'text',
          content: '',
        }],
      };
      
      if (!fs.existsSync(notesDir)) {
        fs.mkdirSync(notesDir, { recursive: true });
      }
      
      fs.writeFileSync(
        path.join(notesDir, `${id}.json`),
        JSON.stringify(newNote, null, 2)
      );
      
      return id;
    } catch (error) {
      console.error('Error creating note:', error);
      return null;
    }
  });

  // Get a specific note by ID
  ipcMain.handle('get-note', async (_, id) => {
    try {
      const filePath = path.join(notesDir, `${id}.json`);
      
      if (!fs.existsSync(filePath)) {
        return null;
      }
      
      const content = fs.readFileSync(filePath, 'utf-8');
      return JSON.parse(content);
    } catch (error) {
      console.error(`Error getting note ${id}:`, error);
      return null;
    }
  });

  // Save a note
  ipcMain.handle('save-note', async (_, note) => {
    try {
      const { id } = note;
      
      if (!id) {
        throw new Error('Note ID is required');
      }
      
      // Update timestamp
      note.updatedAt = new Date().toISOString();
      
      if (!fs.existsSync(notesDir)) {
        fs.mkdirSync(notesDir, { recursive: true });
      }
      
      fs.writeFileSync(
        path.join(notesDir, `${id}.json`),
        JSON.stringify(note, null, 2)
      );
      
      return note;
    } catch (error) {
      console.error('Error saving note:', error);
      throw error;
    }
  });

  // Delete a note
  ipcMain.handle('delete-note', async (_, id) => {
    try {
      const filePath = path.join(notesDir, `${id}.json`);
      
      if (!fs.existsSync(filePath)) {
        return false;
      }
      
      fs.unlinkSync(filePath);
      return true;
    } catch (error) {
      console.error(`Error deleting note ${id}:`, error);
      return false;
    }
  });

  // Save settings
  ipcMain.handle('save-settings', async (_, settings) => {
    try {
      fs.writeFileSync(
        path.join(userDataPath, 'settings.json'),
        JSON.stringify(settings, null, 2)
      );
      
      return true;
    } catch (error) {
      console.error('Error saving settings:', error);
      return false;
    }
  });

  // Get settings
  ipcMain.handle('get-settings', async () => {
    try {
      const settingsPath = path.join(userDataPath, 'settings.json');
      
      if (!fs.existsSync(settingsPath)) {
        return null;
      }
      
      const content = fs.readFileSync(settingsPath, 'utf-8');
      return JSON.parse(content);
    } catch (error) {
      console.error('Error getting settings:', error);
      return null;
    }
  });
}